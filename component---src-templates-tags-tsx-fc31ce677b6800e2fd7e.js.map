{"version":3,"sources":["webpack:///./src/templates/tags.tsx"],"names":["Tags","pageContext","data","location","tag","allMarkdownRemark","edges","tagHeader","totalCount","title","map","node","slug","fields","frontmatter","key","to","pageQuery"],"mappings":"4FAAA,kGAkDeA,UA7CF,SAAC,GAAoC,IAAlCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACzBC,EAAQH,EAARG,IADwC,EAElBF,EAAKG,kBAA3BC,EAFwC,EAExCA,MACFC,EAAY,IAAIH,EAAP,MAHiC,EAEjCI,WACA,oBACf,OACE,kBAAC,IAAD,CAAQL,SAAUA,EAAUM,MAAOF,GACjC,4BAAKA,GACL,4BACGD,EAAMI,KAAI,YAAc,IAAXC,EAAW,EAAXA,KACJC,EAASD,EAAKE,OAAdD,KACAH,EAAUE,EAAKG,YAAfL,MACR,OACE,wBAAIM,IAAKH,GACP,kBAAC,OAAD,CAAMI,GAAIJ,GAAOH,QAMzB,kBAAC,OAAD,CAAMO,GAAG,SAAT,cA2BC,IAAMC,EAAY","file":"component---src-templates-tags-tsx-fc31ce677b6800e2fd7e.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link, graphql } from \"gatsby\";\nimport Layout from \"../components/layout\";\n\nconst Tags = ({ pageContext, data, location }) => {\n  const { tag } = pageContext;\n  const { edges, totalCount } = data.allMarkdownRemark;\n  const tagHeader = `\"${tag}\"로 ${totalCount} 개의 포스트가 검색되었습니다.`;\n  return (\n    <Layout location={location} title={tagHeader}>\n      <h1>{tagHeader}</h1>\n      <ul>\n        {edges.map(({ node }) => {\n          const { slug } = node.fields;\n          const { title } = node.frontmatter;\n          return (\n            <li key={slug}>\n              <Link to={slug}>{title}</Link>\n            </li>\n          );\n        })}\n      </ul>\n\n      <Link to=\"/tags\">모든 태그 보기</Link>\n    </Layout>\n  );\n};\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n};\nexport default Tags;\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}